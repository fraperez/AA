from random import randint, uniform,random
import matplotlib.pyplot as plt
import math

i = 0
x = []
while i<40:
    a = uniform(0,5)
    b = uniform(0,5)
    if a>b:
        x.append([1,a,b,1])
    else:
        x.append([1,a,b,-1])
    i += 1

error = 1
i = 0
w = [0,0,0]
def signo(a):
    if a > 0:
        return 1
    else:
        return -1

def buscar_vectores_soportes(datos, m,b):
    distancias1 = []
    distancias0 = []
    for dato in datos:
        distancia = abs(m*dato[1] + -1*dato[2] + b) /math.sqrt(m**2 + 1)
        print(dato, distancia, m, b)
        print()
        if dato[3] == 1:
            if len(distancias1)==0:
                nuevo = [dato,distancia]
                distancias1.append(nuevo)
            elif len(distancias1)<4:
                distancias1 = ordenar_y_agregar(distancias1, [dato, distancia], len(distancias1))
            else:
                if distancia<distancias1[0][1]:
                  distancias1 = ordenar(distancias1, [dato,distancia])
        else:
            if len(distancias0) == 0:
                distancias0.append([dato, distancia])
            elif len(distancias0)<4:
                distancias0 = ordenar_y_agregar(distancias0, [dato, distancia], len(distancias1))
            else:

                if distancia < distancias0[0][1]:
                  distancias0 = ordenar(distancias0, [dato, distancia])
    return distancias1,distancias0

def calcular_error(a,b):
    if a>b:
        return a-b
    else:
        return b-a

def ordenar(vector_total,vector_individual):
    posicion = 0
    nuevo_vector = []
    agregado = 0;
    for vector in vector_total:
        if vector_individual[1] < vector[1]:
            #quiero sacar el primer vector
            if posicion >= 1:
                nuevo_vector.append(vector)
            posicion += 1
        else:
            if agregado == 0:
                agregado = 1
                nuevo_vector.append(vector_individual)
                nuevo_vector.append(vector)
            else:
                nuevo_vector.append(vector)
    if agregado == 0:
        nuevo_vector.append(vector_individual)
    return nuevo_vector

def ordenar_y_agregar(vector_total,vector_individual,largo):
    nuevo_vector = []
    agregado = 0;
    vector_a_comparar = vector_total[0]
    if largo == 1:
        if vector_individual[1] < vector_a_comparar[1]:
            nuevo_vector.append(vector_a_comparar)
            nuevo_vector.append(vector_individual)
        else:
            nuevo_vector.append(vector_individual)
            nuevo_vector.append(vector_a_comparar)

    else:
        for vector in vector_total:
            if agregado == 0:
                if vector_individual[1] < vector[1]:
                    nuevo_vector.append(vector)
                else:
                    agregado = 1
                    nuevo_vector.append(vector_individual)
                    nuevo_vector.append(vector)
            else:
                nuevo_vector.append(vector)
        if agregado == 0:
            nuevo_vector.append(vector_individual)

    return nuevo_vector

def corregir_recta(soporte_1,soporte_2,i):
    for vector in soporte_1:
            rectamin = [10,0,0]
            #distancia,m,b
            n = 0
            vector1 = vector[0]
            while n<4:
                if (vector1 == soporte_1[n]):
                    n += 1
                else:
                    vector2 = soporte_1[n][0]
                    n = n+1
                    j = 0
                    while j<4:
                        vector3 = soporte_2[j][0]
                        j += 1
                        if vector2[1]==vector1[1]:
                            m = 9999999999999999
                        else: m = abs(vector2[2]-vector1[2])/abs(vector2[1]-vector1[1])
                        b = vector1[2]-m*vector2[1]
                        b2 = vector3[2] - m*vector3[1]
                        punto_medio = [(vector1[1]+vector3[1])/2,(vector1[2]+vector3[2])/2]
                        boptima = punto_medio[1]-m*punto_medio[0]
                        distancia = abs(b2-b)/math.sqrt(m**2 + 1)
                        error = 0
                        if distancia < rectamin[0]:
                           soportes = [soporte_1,soporte_2]
                           for soporte in soportes:
                               for vector in soporte:
                                   coordenadas = vector[0]
                                   if coordenadas[1]>coordenadas[2]:
                                        #esta por debajo,tipo -1
                                        if coordenadas[2]>m*coordenadas[1]+boptima:
                                            #ERROR, me dio que esta por arriba, tipo 1
                                            error = 1
                                   else:
                                       #esta por arriba, tipo 1
                                       if coordenadas[2] < m * coordenadas[1] + boptima:
                                           # ERROR, me dio que esta por abajo, tipo -1
                                           error = 1
                           if error == 0:
                                rectamin1 = [distancia, m, boptima]
    if i == 0:
        rectamin2 = corregir_recta(soporte_2,soporte_1,1)
        print(rectamin1)
        print(rectamin2)

        if rectamin2[0]<rectamin1[0]:
            return rectamin2
        else: return rectamin1
    else: return rectamin1










n = 0
alfa = 0.1
errormin = 1000
wmin = [1000,1000,1000,1000]

while error > 0 and n < 100:
    error = 0
    difw = [0,0, 0]
    i = 0

    for dato in x:
            real = dato[3]
            exitacion = dato[0]*w[0]+dato[1]*w[1]+dato[2]*w[2]
            activacion = signo(exitacion)
            error += calcular_error(real,activacion)
            difw[0] += alfa * (real - activacion) * dato[0]
            difw[1] += alfa*(real-activacion)*dato[1]
            difw[2] += alfa*(real-activacion)*dato[2]
            i += 1
    w[0] += difw[0]
    w[1] += difw[1]
    w[2] += difw[2]

    n += 1
print(w)
print(n)
print(error)
b = -w[0] / w[2]
m1 = -w[1] / w[2]

print("recta y=", m1, "x + ", b)
plt.xlim(0,5)
plt.ylim(0,5)

for dato in x:

    if dato[3]==1:
        plt.scatter(dato[1],dato[2],c='g', marker='o')
    else:
        plt.scatter(dato[1], dato[2], c ='r', marker='o')
i = -0.5
while i<5:
    plt.scatter(i,m1*i + b,c='k')
    i += 0.1
plt.show()


soporte_rojo,soporte_verde = buscar_vectores_soportes(x,m1,b)
print("Rojos", soporte_rojo)
print("Verde", soporte_verde)


print(len(soporte_rojo))
print(len(soporte_verde))

rectamin = corregir_recta(soporte_rojo,soporte_verde,0)
print (rectamin)
plt.xlim(0,5)
plt.ylim(0,5)
soportes = [soporte_verde,soporte_rojo]
i = 0
for soporte in soportes:
    for vector in soporte:
        dato = vector[0]
        if dato[3]==1:
            plt.scatter(dato[1],dato[2],c='g', marker='x')
        else:
            plt.scatter(dato[1], dato[2], c ='r', marker='x')
        i = -0.5
while i<5:
    plt.scatter(i,m1*i + b,c='k')
    plt.scatter(i,rectamin[1]*i + rectamin[2])
    i += 0.1
plt.show()
